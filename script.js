// terrrible code.
function sk() {
env = document.querySelector('iframe[name="stageFrame"]').contentWindow
if (env.API == undefined) {
    env = document.querySelector('iframe').contentWindow
    if (env.API == undefined) {
        alert('tragically an error that is fatal to the operation of this system has occured');
    }
    exit
}
API = env.API;
API.FrameChain.framesStatus[env.API.FrameChain.currentFrame-1]="complete"
results=API.FrameChain.framesStatus;
var completeChange = (!API.Frame.isComplete() && results[API.FrameChain.currentFrame - 1] == "complete");
API.FrameChain.updateFramesStatus(results, API.FrameChain.currentFrame);
Actions.Log();
if (!API.Frame.callOnExit()) {
	if (!API.Frame.playExitAudio()) {
		API.Frame.highlightNextFrameButton();
		if (API.FrameChain.isComplete()) {
			API.FrameChain.complete();
		}
	}
}
API.FrameChain.nextFrame();
}




function an() {
env = document.querySelector('iframe[name="stageFrame"]').contentWindow
if (env.API == undefined) {
    env = document.querySelector('iframe').contentWindow
    if (env.API == undefined) {
        alert('tragically an error that is fatal to the operation of this system has occured')
    }
    exit
}
if (env.messenger == undefined) {
	env.messenger='init'
	env.addEventListener('message', function(e) {
	    var key = e.message ? 'message' : 'data';
	    var data = e[key];
	    parser = new DOMParser();
	    xmlDoc = parser.parseFromString(data, "text/xml");
	    tabs = xmlDoc.querySelectorAll(`element[category]`)
	    console.log(tabs)
	    for (let i = 0; tabs.length > i; i++) {
	        let boxes = xmlDoc.querySelectorAll("dragtile[answer=" + tabs[i].attributes.category.nodeValue + "]")
	        console.log(tabs[i].attributes.category.nodeValue)
	        for (let o = 0; boxes.length > o; o++) {
	            console.log('\t' + boxes[o].textContent)
	        }
	    }
	}, false);
}
parser = new DOMParser();
// works for most question formats
dat = env.API.Frame.StackProgress
for (let e = 0; dat.length > e; e++) {
    data = dat[e].TaskProgress;
    inject = env.document.querySelector("iframe").contentDocument;
    console.log(data)
for (let i = 0; data.length > i; i++) {
    xmlDoc = parser.parseFromString(data[i].Text, "text/xml");
    exp = (xmlDoc.querySelectorAll("expression"))
    if (exp.length == 0) {////task_content.xml and remove repeat
        env.document.querySelector("iframe").contentWindow.eval(`async function x() {await fetch('https://media.edgenuity.com/contentengine/frames/${env.document.querySelector("iframe").contentDocument.location.href.split("/")[5]}/${env.document.querySelector("iframe").contentDocument.location.href.split("/")[5]}.xml', {
					'credentials': 'omit',
					'headers': {
						'Accept': '*/*',
						'X-Requested-With': 'XMLHttpRequest'
					},
					'method': 'GET'
				}).then(async (x)=>{text=(await x.text());window.parent.postMessage(text,'*');})};x()`)
    }
    for (let o = 0; exp.length > o; o++) {
        ans_box = exp[o].textContent;
        ans_data = ans_box.split("|")
        wbox = (ans_data[0].split(":")[1] || ans_data[0])
        htm = inject.querySelector("[id='AssessCtrl" + data[i].Guid + "_" + wbox + "']")
        if (htm !== null && htm.nodeName == "INPUT") {
            let nam = htm.attributes.type.nodeValue;
            if (nam == "checkbox" || nam == "radio") {
                htm.checked = eval(ans_data[2])
                htm.value = eval(ans_data[2])
                if (nam == "radio") {
                    htm.isConnected = eval(ans_data[2]);
                    htm.click()
                }
            } else {
                htm.value = ans_data[2]
            };
        } else if (htm !== null && htm.nodeName == "OPTION") {
            htm.parentElement.value = htm.attributes.value.nodeValue
        } else {
            text_w = (parser.parseFromString(env.API.Frame.StackProgress[1].TaskProgress[0].Text, "text/xml")).querySelectorAll("content");
            str = ''
            for (let i = 1; text_w.length > i; i++) {
                str +="|"+parser.parseFromString(text_w[i].textContent,"text/html").children[0].children[1].innerText
            }
            console.log(str)
        }
    }
}
}
}
console.log(`Commands are
sk()	-> Skip
an()	-> Answer`);